#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Image, CameraInfo
from std_srvs.srv import Empty, EmptyResponse
from cv_bridge import CvBridge, CvBridgeError
from ar_track_alvar_msgs.msg import AlvarMarkers
import dynamic_reconfigure.server
from laser_pointer_tracker.cfg import ThresholdsConfig # pylint: disable=import-error
from image_geometry import PinholeCameraModel

#! /usr/bin/env python
import sys
import argparse
import cv2
import numpy as np

class FrameAligner(object):

    def __init__(self, output_width):
        self.bridge = CvBridge()
        self.output_width = output_width
        topic_base = '{}/'.format(rospy.get_name())
        self.pub = rospy.Publisher(topic_base + 'aligned_image', Image, queue_size=10)
        self.markers = [None] * 4
        self.cam_model = None


    @staticmethod
    def order_points(pts):
        # initialzie a list of coordinates that will be ordered
        # such that the first entry in the list is the top-left,
        # the second entry is the top-right, the third is the
        # bottom-right, and the fourth is the bottom-left
        rect = np.zeros((4, 2), dtype = "float32")
    
        # the top-left point will have the smallest sum, whereas
        # the bottom-right point will have the largest sum
        s = pts.sum(axis = 1)
        rect[0] = pts[np.argmin(s)]
        rect[2] = pts[np.argmax(s)]
    
        # now, compute the difference between the points, the
        # top-right point will have the smallest difference,
        # whereas the bottom-left will have the largest difference
        diff = np.diff(pts, axis = 1)
        rect[1] = pts[np.argmin(diff)]
        rect[3] = pts[np.argmax(diff)]
    
        # return the ordered coordinates
        return rect

    def get_transform(self, detected_pts):
        
        src = self.order_points(detected_pts)

        dst = np.array([(0, 0),
                        (self.output_width, 0),
                        (self.output_width, self.output_width),
                        (0, self.output_width),], np.float32)

        # compute the perspective transform matrix
        return cv2.getPerspectiveTransform(src, dst)

    def image_callback(self, image_message):
        
        if any([ m is None for m in self.markers]):
            return

        if self.cam_model is None:
            return

        cv_image = self.bridge.imgmsg_to_cv2(image_message, desired_encoding="passthrough")

        projected_pts = [None] * 4

        for marker in self.markers:
            projected = self.cam_model.project3dToPixel((marker.pose.pose.position.x,marker.pose.pose.position.y,marker.pose.pose.position.z))
            projected_pts[marker.id] = int(projected[0]), int(projected[1])
            rospy.loginfo('id: %d x: %d y: %d', marker.id, projected[0], projected[1])
            # rospy.loginfo('id: %d x: %f y: %f', marker.id, marker.pose.pose.position.x, marker.pose.pose.position.y)
            # cv2.circle(cv_image, center, 50, self.colors[0], -1)
            # cv2.putText(cv_image, str(marker.id), center, 1, 18, self.colors[1],5)
        
        transform = self.get_transform(np.array(projected_pts))

        warped = cv2.warpPerspective(cv_image, transform, (self.output_width, self.output_width))

        out_img = self.bridge.cv2_to_imgmsg(warped, encoding="bgr8")
        self.pub.publish(out_img)


    def marker_callback(self, markers_message):
        for marker in markers_message.markers:
            if marker.id < len(self.markers):
                self.markers[marker.id] = marker

    def camera_info_callback(self, info_message):
        if self.cam_model is None:
            self.cam_model = PinholeCameraModel()
            self.cam_model.fromCameraInfo(info_message)
        


def listener():

    # In ROS, nodes are uniquely named. If two nodes with the same
    # name are launched, the previous one is kicked off. The
    # anonymous=True flag means that rospy will choose a unique
    # name for our 'listener' node so that multiple listeners can
    # run simultaneously.
    rospy.init_node('align_frame', anonymous=True)

    input_image = rospy.get_param("~input_image")
    camera_info = rospy.get_param("~camera_info")
    output_width = rospy.get_param("~output_width", 800)

    framer = FrameAligner(output_width)

    pose_markers = '/ar_pose_marker'
    rospy.Subscriber(input_image, Image, framer.image_callback)
    rospy.Subscriber(camera_info, CameraInfo, framer.camera_info_callback)
    rospy.Subscriber(pose_markers, AlvarMarkers, framer.marker_callback)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
    listener()
